# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_charts.ipynb.

# %% auto 0
__all__ = ['get_sample', 'human_readify', 'create_sales_chart']

# %% ../nbs/00_charts.ipynb 2
import numpy as np
import pandas as pd
import altair as alt
import math
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
pd.set_option('display.max_columns', 500)

# %% ../nbs/00_charts.ipynb 6
def get_sample(verbose=True):
    """
    Sample Sales Data, Order Info, Sales, Customer, Shipping, etc., 
    Used for Segmentation, Customer Analytics, Clustering and More. 
        - Taken from Kaggle (www.kaggle.com/datasets/kyanyoga/sample-sales-data)
    """
    data = pd.read_csv('../data/sales_data_sample.csv', encoding=('ISO-8859-1'))

    data['ORDERDATE'] = pd.to_datetime(data['ORDERDATE'])

    # Removing all the columns not revelant for this analysis to avoid confusion
    data.drop(['ORDERLINENUMBER','STATUS','PRODUCTCODE','PHONE','STATE',
           'POSTALCODE', 'TERRITORY', 'CONTACTFIRSTNAME', 'CONTACTLASTNAME'], axis=1)

    if verbose:
        print(data.shape)
        display(data.head())
    return data

# %% ../nbs/00_charts.ipynb 9
def human_readify(n):
    """Convert large numbers into a human-readable format."""
    if n == 0:
        return '0'
    
    millnames = ['', 'K', 'M', 'B']
    n = float(n)
    millidx = max(0, min(len(millnames)-1, 
                         int(math.floor(0 if n == 0 else math.log10(abs(n))/3))))
    
    # If in 'K', format with 3 significant figures
    if millidx == 1:
        return '{:.3g}{}'.format(n / 10**(3 * millidx), millnames[millidx])
    elif millidx == 0:
        return '{:.0f}'.format(n)  # Return whole number for values less than 1,000
    return '{:.1f}{}'.format(n / 10**(3 * millidx), millnames[millidx])


# %% ../nbs/00_charts.ipynb 13
def create_sales_chart(data):
    # Extract the month and year from the ORDERDATE for grouping
    data['YearMonth'] = data['ORDERDATE'].dt.to_period('M')

    # Group by YearMonth and sum the SALES
    monthly_sales_alt = data.groupby('YearMonth')['SALES'].sum().reset_index()

    # Convert the 'YearMonth' back to string for Altair to handle it properly
    monthly_sales_alt['YearMonth'] = monthly_sales_alt['YearMonth'].astype(str)

    # Convert the SALES column to a human-readable format
    monthly_sales_alt['ReadableSales'] = monthly_sales_alt['SALES'].apply(human_readify)

    # Create the Altair chart with improved aesthetics
    chart = alt.Chart(monthly_sales_alt).mark_bar(color='cyan', opacity=0.2).encode(
        x=alt.X('YearMonth:O', title='Month', axis=alt.Axis(labelAngle=-45)),
        y=alt.Y('SALES:Q', title='Total Sales', axis=alt.Axis(format=".1s")),
        tooltip=['YearMonth', 'ReadableSales']
    ).properties(
        title='Monthly Sales Over Time',
        width=1000,
        height=300
    )

    # Add text labels on top of the bars
    text = chart.mark_text(
        align='center',
        baseline='bottom',
        dy=-10  # Nudge text upwards
    ).encode(
        text='ReadableSales:O'
    )

    # Combine the chart with bars and text labels
    final_chart = (chart + text)
    
    return final_chart

